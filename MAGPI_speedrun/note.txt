/*
struct Data
{
    //gps
    uint32_t UNIX_time;
    double lat, lon, alt, speed/*?*///, course/*?*/;
/*
    //mpu6050
    double ax, ay, az, wx, wy, wz;

    //bmp390
    double pressure, temp;
};

Data data;
int last_glide;

void setup(){
    inti sensors;
        //put in sleep mode

    while(1){
        check lunch condition (use Jam Jar one);
        if(launched){ ////////////state///////////////
            break;
        }
    }

    while(launched && !deployed){ /////////////state/////////////
        get data;
        store data;
    }
    


}

void loop(){ //main algorthim
    // add glide time routine, can use the unix time to calculate
    get_data();

    current_course = gps.course.deg();
    ideal_course = TingGPSPlus.courseTo(lat, lon, target_lat, target lon);

    if((data.UNIX_time - last_glide_time) > glide_interval){
        algorthim;
        spin_motor();
        glide;
    }

    store_data();


}
*/
/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

int turn_no = 0;
int dir = 0; // -1 == LEFT, 1== RIGHT
double yaw_req = 0.0;
double target_heading = 0.0;
double heading = 0.0;

int main()
{
    std::cout <<"Heading: ";
    std::cin >>heading;
    
    std::cout << "target heading: ";
    std::cin >> target_heading;
  
  yaw_req = target_heading - heading;
  
  //get principal angle
  if (yaw_req > 0.0){
    dir = 1;
    if (yaw_req > 180.0){
      yaw_req = -360.0 - yaw_req;
      dir = -1;
    }
  } else if (yaw_req < 0.0){
      dir = -1;
      if (yaw_req < -180.0){
        yaw_req = -360.0 + yaw_req;
        dir = 1;
        }
    }else {}
    

  std::cout << "yaw_req:" << yaw_req << "/n dir: " << dir;
}